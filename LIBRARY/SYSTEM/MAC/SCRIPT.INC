{$IFNDEF __Script}
 {$DEFINE __Script}

Const
  { Constante scripte du systäme }
 smSystemScript=-1;  { DÇsignation du scripte systäme }
 smCurrentScript=-2; { DÇsignation de la police scripte }
 smAllScripts=-3;    { DÇsignation de tous scriptes }

  { Codes scripte expliquÇ }
 smRoman=0;          { Romain }
 smJaponese=1;       { Japonais }
 smTradChinese=2;    { Chinois traditionnel }
 smKorean=3;         { CorÇen }
 smArabic=4;         { Arabie }
 smHebrew=5;         { HÇbreu }
 smGreek=6;          { Grec }
 smCyrillic=7;       { Cyrillic }
 smRSymbol=8;        { Symbole Gauche-droite }
 smDevanagari=9;     { Devanagari }
 smGurmukhi=10;      { Gurmukhi }
 smGujarati=11;      { Gujarati }
 smOriya=12;         { Oriya }
 smBengali=13;       { Bengali }
 smTamil=14;         { Tamil }
 smTelugu=15;        { Telugu }
 smKannada=16;       { Kannada/Kanarese }
 smMalayalam=17;     { Malayalam }
 smSinhalese=18;     { Sinhalese }
 smBurmese=19;       { Burmese }
 smKhmer=20;         { Khmer/Combodian }
 smThai=21;          { Thai }
 smLoatian=22;       { Loatian }
 smGeorgian=23;      { Georgian }
 smArmenian=24;      { Armenian }
 smSimpChinese=25;   { Simplified Chinese }
 smTibetan=26;       { TibÇtain }
 smMongolian=27;     { Monogolien }
 smGeez=28;          { Geez/Ethiopic }
 smEthiopic=28;      { Synonyme pour smGeez }
 smEastEurRoman=29;  { Synonyme pour smSlavic }
 smVietnamese=30;    { Vietnamien }
 smExtArabic=31;     { Extended Arabic }
 smUninterp=32;      { Symbole non-interprÇtable, symbole de palette }

  { Langage de codes }
 langEnglish=0;          { Scripte smRoman }
 langFrench=1;           { Scripte smRoman }
 langGerman=2;           { Scripte smRoman }
 langItalian=3;          { Scripte smRoman }
 langDutch=4;            { Scripte smRoman }
 langSwedish=5;          { Scripte smRoman }
 langSpanish=6;          { Scripte smRoman }
 langDanish=7;           { Scripte smRoman }
 langPortuguese=8;       { Scripte smRoman }
 langNorwegian=9;        { Scripte smRoman }
 langHebrew=10;          { Scripte smHebrew }
 langJapanese=11;        { Scripte smJapanese }
 langArabic=12;          { Scripte smArabic }
 langFinnish=13;         { Scripte smRoman }
 langGreek=14;           { Scripte smGreek }
 langIcelandic=15;       { Scripte Çtendu Romain }
 langMaltese=16;         { Scripte Çtendu Romain }
 langTurkish=17;         { Scripte Çtendu Romain }
 langCroatian=18;        { Scripte Serbo-Croatien en Romain Çtendu }
 langTradChinese=19;     { Caractäre en chinois traditionnel }
 langUrdu=20;            { Scripte smArabic }
 langHindi=21;           { Scripte smDevanagari }
 langThai=22;            { Scripte smThai }
 langKorean=23;          { Scripte smKorean }
 langLithuanian=24;      { Scripte smEastEurRoman }
 langPolish=25;          { Scripte smEastEurRoman }
 langHungarian=26;       { Scripte smEastEurRoman }
 langEstonian=27;        { Scripte smEastEurRoman }
 langLettish=28;         { Scripte smEastEurRoman }
 langLatvian=28;         { Synonyme de langLettish }
 langSaamisk=29;         { Scripte Romain Çtendu }
 langLappish=29;         { Synonyme de langSaamisk }
 langFaeroese=30;        { Scripte smRoman }
 langFarsi=31;           { Scripte smArabic }
 langPersian=31;         { Synonyme de langFarsi }
 langRussian=32;         { Scripte smCyrillic }
 langSimpChinese=33;     { Caractäre chinois simplifiÇ }
 langFlemish=34;         { Scripte smRoman }
 langIrish=35;           { Scripte smRoman }
 langAlbanian=36;        { Scripte smRoman }
 langRomanian=37;        { Scripte smEastEurRoman }
 langCzech=38;           { Scripte smEastEurRoman }
 langSlovak=39;          { Scripte smEastEurRoman }
 langSlovenian=40;       { Scripte smEastEurRoman }
 langYiddish=41;         { Scripte smHebrew }
 langSerbian=42;         { Scripte Serbo-Croatien dans smCyrillic }
 langMacedonian=43;      { Scripte smCyrillic }
 langBulgarian=44;       { Scripte smCyrillic }
 langUkrainian=45;       { Scripte smCyrillic }
 langByelorussian=46;    { Scripte smCyrillic }
 langUzbek=47;           { Scripte smCyrillic }
 langKazakh=48;          { Scripte smCyrillic }
 langAzarbaijani=49;     { Scripte Azervaijani dans smCyrillic }
 langAzerbaijanAr=50;    { Scripte Azervaijani dans smArabic (Iran) }
 langArmenian=51;        { Scripte smArmenian }
 langGeorgian=52;        { Scripte smGeorgian }
 langMoldovan=53;        { Scripte smCyrillic }
 langMoldavian=53;       { Synonyme langMoldovan }
 langKirghiz=54;         { Scripte smCyrillic }
 langTajiki=55;          { Scripte smCyrillic }
 langTurkmen=56;         { Scripte smCyrillic }
 langMongolian=57;       { Scripte Mongolien dans smMongolia }
 langMongolianCyr=58;    { Scripte Mongolien dans smCyrillic }
 langPashto=59;          { Scripte smArabic }
 langKurdish=60;         { Scripte smArabic }
 langKashmiri=61;        { Scripte smArabic }
 langSindhi=62;          { Scripte smExtArabic }
 langTibetan=63;         { Scripte smTibetan }
 langNepali=64;          { Scripte smDevanagari }
 langSanskrit=65;        { Scripte smDevanagari }
 langMarathi=66;         { Scripte smDevanagari }
 langBengali=67;         { Scripte smBengali }
 langAssamese=68;        { Scripte smAssamese }
 langGujarati=69;        { Scripte smGujarati }
 langPunjabi=70;         { Scripte smGurmukhi }
 langOriya=71;           { Scripte smOriya }
 langMalayalam=72;       { Scripte smMalayalam }
 langKannada=73;         { Scripte smKannada }
 langTamil=74;           { Scripte smTamil }
 langTelugu=75;          { Scripte smTelugu }
 langSinhalese=76;       { Scripte smSinhalease }
 langBurmese=77;         { Scripte smBurmese }
 langKhmer=78;           { Scripte smKhmer }
 langLoa=79;             { Scripte smLoatian }
 langVietnamese=80;      { Scripte smVietnamese }
 langIndonesian=81;      { Scripte smRoman }
 langTagalog=82;         { Scripte smRoman }
 langMalayRoman=83;      { Scripte "Malay" dans smRoman }
 langMalayArabic=84;     { Scripte "Malay" dans smArabic }
 langAmharic=85;         { Scripte smEthiopic }
 langTigrinya=86;        { Scripte smEthiopic }
 langGalla=87;           { Scripte smEthiopic }
 langOromo=87;           { Synonyme pour langGalla }
 langSomali=88;          { Scripte smRoman }
 langSwahili=89;         { Scripte smRoman }
 langRuanda=90;          { Scripte smRoman }
 langRundi=91;           { Scripte smRoman }
 langChewa=92;           { Scripte smRoman }
 langMalagasy=93;        { Scripte smRoman }
 langEsperanto=94;       { Scripte Romain Çtendu }
 langWelsh=128;          { Scripte smRoman }
 langBasque=129;         { Scripte smRoman }
 langCatalan=130;        { Scripte smRoman }
 langLatin=131;          { Scripte smRoman }
 langQuechua=132;        { Scripte smRoman }
 langGuarani=133;        { Scripte smRoman }
 langAymara=134;         { Scripte smRoman }
 langTatar=135;          { Scripte smCyrillic }
 langUighur=136;         { Scripte smArabic }
 langDzongkha=137;       { Scripte smTibetan (lang de Bhutan) }
 langJavaneseRom=138;    { Scripte Javanese dans smRoman }
 langSundaneseRom=139;   { Scripte Sundanese dans smRoman }

  { Code de RÇgion }
 verUS=0;
 verFrance=1;
 verBritain=2;
 verGermany=3;
 verItaly=4;
 verNetherlands=5;
 verFrBelgiumLux=6; { Franáais pour Belgique & Luxembourg }
 verSweden=7;
 verSpain=8;
 verDenmark=9;
 verPortugal=10;
 verFrCanada=11;
 verNorway=12;
 verIsrael=13;
 verJapan=14;
 verAustralia=15;
 verArabia=16;
 verArabic=16; { Synonyme pour ver Arabia }
 verFinland=17;
 verFrSwiss=18; { Suisse franáaise }
 verGrSwiss=19; { Suisse allemande }
 verGreece=20;
 verIceland=21;
 verMalta=22;
 verCyprus=23;
 verTurkey=24;
 verYugoCroatian=25; { Systäme Croatien }
 verIndiaHindi=33; { Systäme Hindi pour India }
 verPakistan=34;
 verLithunia=41;
 verPoland=42;
 verHungary=43;
 verEstonia=44;
 verLatvia=45;
 verLapland=46;
 verFaeroeIsl=47;
 verIran=48;
 verRussia=49;
 verIreland=50; { Langage l'anglais version pour Irlande }
 verKorea=51;
 verChina=52;
 verTaiwan=53;
 verThailand=54;
 minCountry=verUS;
 maxCountry=verThailand;

  { Codes de calendrier }
 calGregorian=0;
 calArabicCivil=1;
 calArabicLunar=2;
 calJapanese=3;
 calJewish=4;
 calCoptic=5;
 calPersian=6;

  { Codes de nombre }
 intWestern=0;
 intArabic=1;
 intRoman=2;
 intJapanese=3;
 intEuropean=4;
 intOutputMask=$8000;

  { Types d'octet CharacterByteType }
 smSingleByte=0;
 smFirstByte=-1;
 smLastByte=1;
 smMiddleByte=2;

  { Masque des champs CharacterType }
 smcTypeMask=$000F;
 smcReserved=$00F0;
 smcClassMask=$0F00;
 smcOrientationMask=$1000; { Scripte glyph de 2 octets d'orientation }
 smcRightMask=$2000;
 smcUpperMask=$4000;
 smcDoubleMask=$8000;

  { Simple type de caractäre CharacterType }
 smCharPunct=$1000;
 smCharAscii=$0001;
 smCharEuro=$0007;
 smCharExtAscii=$0007; { Meilleur synonyme pour smCharEuro }

  { Types de caractäre pour le systäme scripte CharacterType supplÇmentaire }
 smCharKatakana=$0002;        { Katakana Japonais }
 smCharHiragana=$0003;        { Hiragana Japonais }
 smCharIdeographic=$0004;     { Hanzi, Kanji, Hanja }
 smCharTwoByteGreek=$0005;    { 2 octets Grec dans le systäme Est loin }
 smCharTwoByteRussian=$0006;  { 2 octets "Cyrillic" dans le systäme Est loin }
 smCharBidirect=$0008;        { Arabe/HÇbreu }
 smCharContextualLR=$0009;    { Gauche-Droite Contextual: Thai, scriptes Indic }
 smCharNonContextualLR=$000A; { Gauche-Droite Contextual: "Cyrillic", Grec }
 smCharHangul=$000C;          { CorÇen "Hangul" }
 smCharJamo=$000D;            { CorÇen "Jamo" }
 smCharBopomofo=$000E;        { Bopomofo de Chine (Zhuyinfuhao) }

  { Classes pour ponctuation CharacterType (smCharPunct) }
 smPunctNormal=$0000;
 smPunctNumber=$0100;
 smPunctSymbol=$0200;
 smPunctBlank=$0300;

  { Classes pour ponctuation CharacterType supplÇmentaire dans 2 octets systäme }
 smPunctRepeat=$0400;  { Masque de rÇpÇtition }
 smPunctGraphic=$0500; { Ligne graphiques }

  { Classes Katakana & Hiragana CharacterType pour 2 octets systäme }
 smKanaSmall=$0100;  { Petit caractäre Kana }
 smKanaHardOk=$0200; { Peut avoir dakuten }
 smKanaSoftOk=$0300; { Peut avoir dakuten ou han-dakuten }

  { Classes Ideographique CharacterType pour 2 octets systäme }
 smIdeographicLevel1=$0000; { Caractäre niveau 1 }
 smIdeographicLevel2=$0100; { Caractäre niveau 2 }
 smIdeographicUser=$0200;   { Caractäre utilisateur }

  { Classes Jamo CharacterType pour le systäme CorÇen }
 smJamoJaeum=$0000;    { Caractäre simple consone }
 smJamoBogJaeum=$0100; { Caractäre compexe consone }
 smJamoMoeum=$0200;    { Caractäre simple voyelle }
 smJamoBogMoeum=$0300; { Caractäre complexe voyelle }

  { Orientation glyph CharacterType pour 2 octets systäme }
 smCharHorizontal=$0000; { Caractäre de forme horizontal, ou pour tous }
 smCharVertical=$1000;   { Caractäre de forme vertical }

  { Directions de CharacterType }
 smCharLeft=$0000;
 smCharRight=$2000;

  { Case modificateur de CharacterType }
 smCharLower=$0000;
 smCharUpper=$4000;

  { Caractäre modificateur de taille CharacterType (1 ou multiple octets) }
 smChar1byte=$0000;
 smChar2byte=$8000;

  { Types de destination TransliterateText pour Romain }
 smTransAscii=0;    { Conversion en Ascii }
 smTransNative=1;   { Conversion en police scripte }
 smTransCase=$FE;   { Case de conversion pour tous texte }
 smTransSystem=$FF; { Conversion au scripte systäme }

  { Types de destination TransliterateTexte pour 2 octets scripte }
 smTransAscii1=2;     { 1 octet Romain }
 smTransAscii2=3;     { 2 octet Romain }
 smTransKana1=4;      { 1 octet Japonais Katakana }
 smTransKana2=5;      { 2 octet Japonais Katakana }
 smTransGana2=7;      { 2 octet Japonais Hiragana (pas 1 octet Hiragana) }
 smTransHangul2=8;    { 2 octet CorÇen Hangul }
 smTransJamo2=9;      { 2 octet CorÇen Jamo }
 smTransBopomofo2=10; { 2 octet Chinois Bopomofo (Zhuyinfuhao) }

  { Modificateur de destination TransliterateText }
 smTransLower=$4000; { Destination en minuscule }
 smTransUpper=$8000; { Destination en majuscule }

  { Nombre de format resource TransliterateText }
 smTransRuleBaseFormat=1; { Resource du format des rägles de base trs1 }
 smTransHangulFormat=2;   { Resource du format des tables de base trs1 }

  { Drapeau de propriÇtÇ TransliterateText }
 smTransPreDoubleByting=1; { Converti tous textes Ö 2 octets avant la translitÇration }
 smTransPreLowerCasing=2;  { Converti tous textes en minuscule avant la translitÇration }

  { Masque source TransliterateText - GÇnÇral }
 smMaskAll=$FFFFFFFF; { Converti tous textes }

  { Masque source TransliterateText }
 smMaskAscii=$00000001;  { 2^smTransAscii }
 smMaskNative=$00000002; { 2^smTransNative }

  { Masque source TransliterateText pour scripte 2 octets }
 smMaskAscii1=$00000004;    { 2^smTransAscii1 }
 smMaskAscii2=$00000008;    { 2^smTransAscii2 }
 smMaskKana1=$00000010;     { 2^smTransKana1 }
 smMaskKana2=$00000020;     { 2^smTransKana2 }
 smMaskGana2=$00000080;     { 2^smTransGana2 }
 smMaskHangul2=$00000100;   { 2^smTransHangul2 }
 smMaskJamo2=$00000200;     { 2^smTransJamo2 }
 smMaskBopomofo2=$00000200; { 2^smTransBopomofo2 }

  { Valeur rÇsultat: GetScriptManagerVariable, SetScriptManagerVariable, GetScriptVariable & SetScriptVarible }
 smNotInstalled=0; { Routine invalide dans le scripte spÇcifiÇ }
 smBadVerb=-1;     { Mauvais sÇlecteur passÇ Ö la routine }
 smBadScript=-2;   { Mauvais code scripte passÇ Ö la routine }

  { Valeur pour scripte du drapeau de retracage }
 smRedrawChar=0;  { Retrace le caractäre seulement }
 smRedrawWord=1;  { Mot d'entrÇe de retracage (systäme 2 octets) }
 smRedrawLine=-1; { Ligne d'entrÇe de retracage (systäme bidirectionnel) }

  { SÇlecteurs GetScriptManagerVariable & SetScriptManagerVariable }
 smVersion=0;          { Version du gestion scripte des nombres }
 smMunged=2;           { Changement globales du compteur }
 smEnable=4;           { Compteur de scriptes actif, incluant Romain }
 smBidirect=6;         { Scripte moins bidirectionnel 1 }
 smFontForce=8;        { Force le drapeau de police }
 smIntlForce=10;       { Drapeau de sÇlection des resources International }
 smForced=12;          { Force le scripte Ö àtre un scripte systäme }
 smDefault=14;         { Par dÇfaut le scripte doit àtre un scripte Romain }
 smPrint=16;           { Routine d'action d'impression }
 smSysScript=18;       { Scripte systäme }
 smLastScript=20;      { Dernier scripte clavier }
 smKeyScript=22;       { Scripte clavier }
 smSysRef=24;          { Pliage systäme par refNum }
 smKeyCache=26;        { "obsolete" }
 smKeySwap=28;         { Handle de table d'Çchange }
 smGenFlags=30;        { Long drapeaux gÇnÇral }
 smOverride=32;        { Drapeau du scripte "override" }
 smCharPortion=34;     { Caractäre avec proportion SpExtra }
 smDoubleByte=36;      { Drapeau pour le scripte double octet installÇ }
 smKCHRCache=38;       { Pointeur retournÇ au cache KCHR }
 smRegionCode=40;      { Retourne le code de la region courante (verXxx) }
 smKeyDisableState=42; { Retourne l'Çtat inactif cournant du clavier }

  { SÇlecteur GetScriptVariable & SetScriptVariable }
 smScriptVersion=0;       { Version logiciel du scripte }
 smScriptMunged=2;        { Compteur de scripte de changement d'entrÇe }
 smScriptEnable=4;        { Scripte du drapeau actif }
 smScriptRight=6;         { Drapeau de droite Ö gauche }
 smScriptJust=8;          { Drapeau de justification }
 smScriptRedraw=10;       { Mot de drapeau de retracage }
 smScriptSysFond=12;      { Police systäme prÇfÇrable }
 smScriptAppFond=14;      { Police d'application prÇfÇrable }
 smScriptBundle=16;       { Commenáement des verbes itlb }
 smScriptNumber=16;       { Scripte identificateur international 0 (itl0) }
 smScriptDate=18;         { Scripte identificateur international 1 (itl1) }
 smScriptSort=20;         { Scripte identificateur international 2 (itl2) }
 smScriptFlags=22;        { Mot de drapeau }
 smScriptToken=24;        { Scripte identificateur international 4 (itl4) }
 smScriptEncoding=26;     { Identificateur optionnel international 5 (itl5), si prÇsent }
 smScriptLang=28;         { Langage courante pour le scripte }
 smScriptNumDate=30;      { Format du nombre de la date dans le scripte }
 smScriptKeys=32;         { Identificateur de scripte KCHR }
 smScriptIcon=34;         { ID # de SICN ou de la famille kcs#/kcs4/kcs8 }
 smScriptPrint=36;        { Routine d'action de scripte d'impression }
 smScriptTrap=38;         { Porte d'entrÇe de pointeur }
 smScriptCreator=40;      { CrÇateur de fichier scripte }
 smScriptFile=42;         { Nom du fichier scripte }
 smScriptName=44;         { Nom du scripte }
 smScriptMonoFondSize=78; { Police sans espace (hi) et taille (lo) }
 smScriptPrefFondSize=80; { Police prÇfÇrable (hi) et taille (lo) }
 smScriptSmallFondSize=82;{ Petite police par dÇfaut (hi) et taille (lo) }
 smScriptSysFondSize=84;  { Police systäme par dÇfaut (hi) et taille (lo) }
 smScriptAppFondSize=86;  { Police d'appliation par dÇfaut (hi) et taille (lo) }
 smScriptHelpFondSize=88; { Aide Mgr par dÇfaut (hi) et taille (lo) }
 smScriptValidStyles=90;  { Masque de style de validitÇ pour les scriptes }
 smScriptAliasStyles=92;  { Style (ensemble) Ö utiliser pour les aliases }

  { SÇlecteur nÇgatif pour KeyScript }
 smKeyNextScript=-1;         { Switch du prochain scripte valide }
 smKeySysScript=-2;          { Switch du scripte du systäme }
 smKeySwapScript=-3;         { Switch du scripte prÇcÇdamment utilisÇ }
 smKeyNextKybd=-4;           { Switch du prochain code clavier dans le keyscript courant }
 smKeySwapKybd=-5;           { Switch du prÇcÇdant code clavier dans le keyscript courant }
 smKeyDisableKybds=-6;       { Codes clavier inactive pas dans le systäm ou dans le scripte Romain }
 smKeyEnableKybds=-7;        { Codes clavier pre-activÇ par tous les scriptes actif }
 smKeyToggleInLine=-8;       { EntrÇe de "Toggle inline" pour le keyscript courant }
 smKeyToggleDirection=-9;    { Direction de la ligne du "Toggle" par dÇfaut (TESysJust) }
 smKeyNextInputMethod=-10;   { Switch du prochain mÇthode d'entrÇe dans le script courant }
 smKeySwapInputMethod=-11;   { Switch de la prÇcÇdante mÇthode d'entrÇe dans le script courant }
 smKeyDisableKybdSwitch=-12; { Switchage inactif du code clavier courant }
 smKeyDirLeftRight=-15;      { Ensemble de direction de ligne par dÇfaut gauche-droite, alignÇ gauche }
 smKeySetDirRightLeft=-16;   { Ensemble de direction de ligne par dÇfaut droite-gauche, alignÇ droite }
 smKeyRoman=-17;             { Ensemble de keyscript Ö Romain. N'est accomplit qu'avec le format Romain }

  { Bits dans le mot smScriptFlags  (environ 8 bits sont non-static) }
 smsfIntellCP=0;        { Scripte intelligent pour "Cut" & "Paste" }
 smsfSingByte=1;        { Scripte avec un seul octet }
 smsfNatCase=2;         { Caractäre d'origine ont des cases minuscules/majuscules }
 smsfContext=3;         { Le Scripte est contextuel }
 smsfNoForceFont=4;     { Le scripte ne force pas les caractäres }
 smsfB0Digits=5;        { Scripte sont des nombres alternÇ de B0-B9 }
 smsfAutoInit=6;        { Initialisation automatique du scripte }
 smsfUnivExt=7;         { Script est un Handler par WorldScript I }
 smsfSynchUnstyledTE=8; { Synchronise le clavier et le type de caractäre dans TE indÇfinie }
 smsfForms=13;          { Utilise la forme contextuel pour les lettres }
 smsfLigatures=14;      { Utilise les ligatures contextuel }
 smsfReverse=15;        { Texte inverse d'origine, droite-gauche }

  { Bits long dans le smGenFlags (Premier (Haut-ordre) octet est un ensemble de forme de drapeau d'octet itlc)}
 smfShowIcon=31;      { Affiche l'icon màme s'il n'y a qu'un scripte }
 smfDualCaret=30;     { Utilise le "dual caret" pour le mixage de direction de texte }
 smfNameTagEnable=29; { RÇservÇ pour usage interne }

  { Gestionnaire de police scripte centrale }
 smFondStart=$4000; { Commence avec 16Ko }
 smFondEnd=$C000;   { Passe la fin de la rangÇ Ö 48Ko }

  { Outils police centrale }
 smUprHalfCharSet=$80; { Premier code de caractäre dans le moitiÇ du sommet de l'ensemble de caractäre standard }

  { Extensions de l'ensemble de caractäre }
 diaeresisUprY=$D9;
 fraction=$DA;
 intlCurrency=$DB;
 leftSingGuillement=$DC;
 rightSingGuillement=$DD;
 fiLigature=$DE;
 flLigature=$DF;
 dblDagger=$E0;
 centeredDot=$E1;
 baseSingQuote=$E2;
 baseDblQuote=$E3;
 perThousand=$E4;
 circumflexUprA=$E5;
 circumflexUprE=$E6;
 acuteUprA=$E7;
 diaeresisUprE=$E8;
 graveUprE=$E9;
 acuteUprI=$EA;
 circumflexUprI=$EB;
 diaeresisUprI=$EC;
 graveUprI=$ED;
 acuteUprO=$EE;
 circumflexUprO=$EF;
 appleLogo=$F0;
 graveUprO=$F1;
 acuteUprU=$F2;
 circumflexUprU=$F3;
 graveUprU=$F4;
 dotlessLwrI=$F5;
 circumflex=$F6;
 tilde=$F7;
 macron=$F8;
 breveMask=$F9;
 overDot=$FA;
 ringMark=$FB;
 cedilla=$FC;
 doubleAcute=$FD;
 ogonek=$FE;
 hachek=$FF;

  { Valeur de TokenType }
 tokenIntl=4;          { La ressource internationnal de nombre de marqueur }
 tokenEmpty=-1;        { Usage interne aussi un drapeau vide }
 tokenUnknown=0;       { Ce caractäre ne pas compatible avec le dÇfinition du type de marqueur }
 tokenWhite=1;         { Espace blanc }
 tokenLeftLit=2;       { Commencement litÇrale }
 tokenRightLit=3;      { Fin litÇrale }
 tokenAlpha=4;         { AlphabÇthique }
 tokenNumeric=5;       { NumÇrique }
 tokenNewLine=6;       { Nouvelle ligne }
 tokenLeftComment=7;   { Ouvre un commentaire }
 tokenRightComment=8;  { Ferme un commentaire }
 tokenLiteral=9;       { Literal }
 tokenEscape=10;       { Caractäre d'Çchapement/contrìle ('\' dans "\n", "\t") }
 tokenAltNum=11;       { Nombre alternÇ (B0h-B9h en Arabie, Hebreu }
 tokenRealNum=12;      { Nombre rÇel }
 tokenAltReal=13;      { Nombre rÇel alternÇ }
 tokenReserve1=14;     { ReservÇ }
 tokenReserve2=15;     { RÇservÇ }
 tokenLeftParen=16;    { Ouvre parenthäse }
 tokenRightParen=17;   { Ferme parenthäse }
 tokenLeftBracket=18;  { Ouvre la console carrÇ }
 tokenRightBracket=19; { Ferme la console carrÇ }
 tokenLeftCurly=20;    { Ouvre la console bouclÇ }
 tokenRightCurly=21;   { Ferme la console bouclÇ }
 tokenLeftEnclose=22;  { Ouvre guillemet }
 tokenRightEnclose=23; { Ferme guillemet }
 tokenPlus=24;         { Plus (+) }
 tokenMinus=25;        { Moins (-) }
 tokenAsterick=26;     { Heures/Multiple }
 tokenDivide=27;       { Diviseur }
 tokenPlusMinus=28;    { Symbole Plus ou moins }
 tokenSlash=29;        { / }
 tokenBackSlash=30;    { \ }
 tokenLess=31;         { Symbole de plus petit '<' }
 tokenGreat=32;        { Symbole de plus grand '>' }
 tokenEqual=33;        { Egale (=) }
 tokenLessEqual2=34;   { InfÇrieur ou Çgale, 2 caractäres (<=) }
 tokenLessEqual1=35;   { InfÇrieur ou Çgale, 1 caractäre (Û) }
 tokenGreatEqual2=36;  { SupÇrieur ou Çgale, 2 caractäres (>=) }
 tokenGreatEqual1=37;  { SupÇrieur ou Çgale, 1 caractäre (Ú) }
 token2Equal=38;       { Double ÇgalitÇ (==) }
 tokenColonEqual=39;   { deux-point Çgale (:=) }
 tokenNotEqual=40;     { Pas Çgale, 1 caractäre }
 tokenLessGreat=41;    { InfÇrieur/supÇrieur, symbole Pascal de non ÇgalitÇ (<>) }
 tokenExclamEqual=42;  { Exclamation Çgale, symbole C/C++ pour non ÇgalitÇ (!=) }
 tokenExclam=43;       { Point d'exclamation (!) }
 tokenTilde=44;        { "Tilde" centrer }
 tokenComma=45;        { Virgule (,) }
 tokenPeriod=46;
 tokenLeft2Quote=47;   { Ouvre un double citation (Æ) }
 tokenRight2Quote=48;  { Ferme un double citation (Ø) }
 tokenLeft1Quote=49;   { Ouvre un simple citation }
 tokenRight1Quote=50;  { Ferme un simple citation }
 token2Quote=51;       { Double citation }
 token1Quote=52;       { Simple citation }
 tokenSemicolon=53;    { (;) }
 tokenPercent=54;      { (%) }
 tokenCaret=55;
 tokenUnderline=56;    { (_) }
 tokenAmpersand=57;
 tokenAtSign=58;
 tokenBar=59;          { (≥) }
 tokenQuestion=60;     { (?) }
 tokenPi=61;           { Case minscule pi („) }
 tokenRoot=62;         { Symbole racine carrÇ (˚) }
 tokenSigma=63;        { "Capital sigma" }
 tokenIntegral=64;     { Signe intÇgral }
 tokenMicro=65;
 tokenCapPi=66;        { pi capital }
 tokenInfinity=67;
 tokenColon=68;        { (:) }
 tokenHash=69;         { (#) }
 tokenDollar=70;       { ($) }
 tokenNoBreakSpace=71; { Espace "non-breaking" }
 tokenFraction=72;
 tokenIntlCurrency=73;
 tokenLeftSingGuillemet=74;
 tokenRightSingGuillemet=75;
 tokenPerThousand=76;
 tokenEllipsis=77;
 tokenCenterDot=78;
 tokenNil=127;
 delimPad=-2;

  { Table des sÇlecteurs pour GetIntlResourceTable }
 smWordSelectTable=0;  { Demande le mot d'arràt de la table 'itl2' }
 smWordWrapTable=1;    { Demande la ligne d'arràt de la table 'itl2' }
 smNumberPartsTable=2; { Demande les parties du nombre de la table 'itl4' }
 smTokenTable=3;       { Demande une dÇmarqueur de la table de 'itl4' }
 smWhiteSpaceList=4;   { Demande un espace blanc de la table de 'itl4' }

{$I \Source\Chantal\Library\System\Mac\Types\Base.Inc}

Type
 TokenResults=(tokenOk,tokenOverflow,stringOverflow,badDelim,badEnding,crash);
 CharByteTable=Packed Array[0..255] of SignedByte;
 TokenType=Integer;
 DelimType=Array[0..1] of TokenType;
 CommentType=Array[0..3] of TokenType;

 TokenRec=Record
  thetoken:TokenType;
  position:Ptr;             { Pointeur de la source originale }
  length:LongInt;           { Longueur du texte de la source originale }
  stringPosition:StringPtr; { Chaåne de caractäre de la copie Pascal/C de l'identificateur }
 End;
 TokenRecPtr=^TokenRec;

 TokenBlock=Record
  source:Ptr;                           { Pointeur de la chaåne de caractäre }
  sourceLength:LongInt;                 { Longueur de la source de chaåne de caractäre }
  tokenList:Ptr;                        { Pointeur de la Array des marqueurs }
  tokenLength:LongInt;                  { Longueur maximal de la TokenList }
  tokenCount:LongInt;                   { Nombre de marqueur gÇnÇrÇ par faiseur de marqueur }
  stringList:Ptr;                       { Pointeur de la chaåne d'identificateur }
  stringLength:LongInt;                 { Longueur de la chaåne de chaåne de caractäre }
  stringCount:LongInt;                  { Nombre d'octet de l'usage courant }
  doString:Boolean;                     { Marque la chaåne de caractäre et le fixe dans StringList }
  doAlphanumeric:Boolean;               { Identificateurs peut inclure des nombres }
  doNest:Boolean;                       { Fait poser une question ? }
  leftDelims,rightDelims:DelimType;
  leftComment,rightComment:CommentType;
  escapeCode,decimalCode:TokenType;     { Symbole de code d'Çchapement/code dÇcimal }
  itlResource:Handle;                   { Handle du scripte courant de la resource itl4 }
  reserved:Array[0..7]of LongInt;       { Simplement une liste de 0 }
 End;
 TokenBlockPtr=^TokenBlock;

 { VÇrification et ajustement de la direction systäme }
Function GetSysDirection:Integer;Forward;
Procedure SetSysDirection(newDirection:Integer);Forward;

 { VÇrification et ajustement du Gestionnaire scripte de variable }
Function GetScriptManagerVariable(selector:Integer):LongInt;Forward;
Function SetScriptManagerVariable(selector:Integer;param:LongInt):OSErr;Forward;

 { VÇrification et ajustement du scripte de variable }
Function GetScriptVariable(script:ScriptCode;selector:Integer):LongInt;Forward;
Function SetScriptVariable(script:ScriptCode;selector:Integer;param:LongInt):OSErr;Forward;

 { Ajustement clavier }
Procedure KeyScript(code:Integer);Forward;

 { DÇtermination du codes de scripte de l'information de la police }
Function FontScript:Integer;Forward;
Function FontToScript(fontNumber:Integer):Integer;Forward;
Function IntlScript:Integer;Forward;

 { Analyseur des caractäres }
Function CharacterByteType(textBuf:Ptr;textOffset:Integer;script:ScriptCode):Integer;Forward;
Function CharacterType(textBuf:Ptr;textOffset:Integer;script:ScriptCode):Integer;Forward;
Function FillParseTable(Var table:CharByteTable;script:ScriptCode):Boolean;Forward;

 { Accäs directe au resource international }
Procedure ClearIntlResourceCache;Forward;
Function  GetIntlResource(theID:Integer):Handle;Forward;
Procedure GetIntlResourceTable(script:ScriptCode;tableCode:Integer;Var itlHandle:Handle;
                               Var offset:LongInt;Var length:LongInt);Forward;

 { Initilisation des marqueurs }
Function IntlTokenize(tokenParam:TokenBlockPtr):TokenResults;Forward;

 { TranslitÇration }
Function TransliterateText(scrHandle:Handle;dstHandle:Hdl;target:Integer;srcMask:LongInt;scr:ScriptCode):OSErr;Forward;

 { Remplacement d'un scripte du systäme par des routines par dÇfaut }
Function  GetScriptUtilityAddress(selector:Integer;before:Boolean;script:ScriptCode):Ptr;Forward;
Procedure SetScriptUtilityAddress(selector:Integer;before:Boolean;routineAddr:Ptr;script:ScriptCode);Forward;
Function  GetScriptQDPatchAddress(trapNum:Integer;before,forPrinting:Boolean;script:ScriptCode):Ptr;Forward;
Procedure SetScriptQDPatchAddress(trapNum:Integer;before,forPrinting:Boolean;routineAddr:Ptr;scr:ScriptCode);Forward;

{$ENDIF}
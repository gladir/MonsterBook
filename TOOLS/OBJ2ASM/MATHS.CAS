//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³                                                     ³
//³    Malte Genesis/Module de base des Math‚matiques   ³
//³              Edition Isabel pour Mode R‚el          ³
//³                    III - Version 1.0                ³
//³                       1995/02/02                    ³
//³                                                     ³
//³     Copyright (C) par les Chevaliers de Malte       ³
//³                                                     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

//INTERFACE

#ifdef _Windows
 #error Cette bibliotheque ne supporte pas le mode Windows
#endif

#include "MATHS.H"

Byte Processor;
Bool Up32Bits;

//IMPLEMENTATION

/*void far FillChar86(void far *X,Word Len,Byte Value);
void far FillChar88(void far *X,Word Len,Byte Value);
void far FillChar386(void far *X,Word Len,Byte Value);
void Move86(void far *Source,void far *Dest,Word Count);
void Move88(void far *Source,void far *Dest,Word Count);
void Move386(void far *Source,void far *Dest,Word Count);*/

AbsInt(int I)
{
 asm{ MOV AX,I;
      OR  AX,AX;
      JGE _End;
      NEG AX; }
_End:
 return _AX;
}

long AddrExt2Conv(void far *Addr) {return (Seg(Addr) << 4) + Ofs(Addr);}
void far*AddrRPtr2Ext(RPtr X) {return ((void _seg*)(X.LoSeg << 12)+(void near *)(X.Base));}

Bool Compare(void far*Source,void far*Dest,Word Len)
{
 asm {
  MOV CX,Len;
  JCXZ _0;
  LDS SI,Source;
  LES DI,Dest;
  CLD;
  REPZ CMPSB;
  JZ  _0;
  MOV CL,1;
 }
_0:
 asm MOV AL,CL;
 asm XOR AL,1;
 return (Bool)_AL;
}

long DivL(long a,long b) { return (((a == 0)||(b == 0)) ? 0: a/b); }
Word DivW(Word a,Word b) { return (((a == 0)||(b == 0)) ? 0: a/b); }

void FillBool(void far *X,Word Len,Bool Value)
{
 Byte VX = Value * 0xFF,EB; Word W; Byte *XB = (Byte *)X;
 FillChar(X,Len >> 3,VX);
 EB = Len & 7;
 if(EB > 0)
 {
  W = (Len >> 3) + 1;
  if(Value) XB[W] |= 0xFF >> (8-EB); else XB[W] &= ~(0xFF >> (8-EB));
 }
}

void FillBoolAt(void far *X,Word At,Word Len,Bool Value)
{
 Byte VX,EB; Word AtHi; Byte *XB = (Byte *)X;
 if(At == 0) FillBool(X,Len,Value);
  else
 {
  AtHi = At/8, At &= 7;
  if(Value) XB[0] |= (0xFF << At); else XB[0] &= ~(0xFF >> At);
  XB += AtHi + 1;
  FillBool(XB,Len-At,Value);
 }
}

void FillChar(void far *X,Word Len,Byte Value)
{
 asm {
 CLD;
 LES DI,X;
 MOV CX,Len;
 MOV AL,Value;
 MOV AH,AL;
 SHR CX,1;
 REP STOSW;
 ADC CX,CX;
 REP STOSB;
 }
}

/*void FillChar88(void far *X,Word Len,Byte Value)
{
 asm {
 CLD;
 LES DI,X;
 MOV CX,Len;
 MOV AL,Value;
 REP STOSB;
 }
}

void FillChar386(void far *X,Word Len,Byte Value)
{
 asm {
 CLD;
 LES DI,X;
 MOV CX,Len;
 MOV AL,Value;
 MOV AH,AL;
 DB  0x50,0x50; // PUSH AX, PUSH AX
 DB  0x66,0x58; // POP  EAX
 MOV BX,CX;
 AND BX,3;
 DB  0xC1,0xE9,0x02; // SHR CX,2
 DB  0xF3; DW 0xAB66; // REP STOSD
 MOV CX,BX;
 REP STOSB;
 }
}*/

void FillWord(void far*X,Word Len,Word Value)
{
 asm {
  CLD;
  LES DI,X;
  MOV CX,Len;
  MOV AX,Value;
  REP STOSW;
 }
}

Byte MaxByte(Byte N,Byte Max) { return ((N < Max) ? (N+1): (0)); }
Byte MinByte(Byte N,Byte Max) { return ((N > 0) ? (N-1): (Max)); }
Word ModW(Word a,Word b) { return ((a == 0)||(b == 0) ? 0: a%b); }

void Move(void far *Source,void far *Dest,Word Count)
{
 asm {
 CLD;
 PUSH DS;
  LDS SI,Source;
  LES DI,Dest;
  MOV CX,Count;
  SHR CX,1;
  REP MOVSW;
  ADC CX,CX;
  REP MOVSB;
 POP DS;
 }
}

/*void Move88(void far *Source,void far *Dest,Word Count)
{
 asm {
 CLD;
 PUSH DS;
  LDS SI,Source;
  LES DI,Dest;
  MOV CX,Count;
  REP MOVSB;
 POP DS;
 }
}

void Move86(void far *Source,void far *Dest,Word Count)
{
 asm {
 CLD;
 PUSH DS;
  LDS SI,Source;
  LES DI,Dest;
  MOV CX,Count;
  SHR CX,1;
  REP MOVSW;
  ADC CX,CX;
  REP MOVSB;
 POP DS;
 }
}

void Move386(void far *Source,void far *Dest,Word Count)
{
 asm {
 CLD;
 PUSH DS;
  LDS SI,Source;
  LES DI,Dest;
  MOV CX,Count;
  MOV BX,CX;
  AND BX,3;
  DB 0xC1,0xE9,0x02;
  DB 0xF3; DW 0xA566; // REP MOVSD
  MOV CX,BX;
  REP MOVSB;
 POP DS;
 }
}*/

void MoveBack(void far*Source,void far *Dest,Word Count)
{
 asm {
 STD;
 PUSH DS;
  LDS SI,Source;
  LES DI,Dest;
  MOV CX,Count;
  ADD SI,CX;
  SUB SI,2;
  ADD DI,CX;
  SUB DI,2;
  SHR CX,1;
  REP MOVSW;
  ADC CX,CX;
  REP MOVSB;
 POP  DS;
 }
}

void SwapByte(Byte *a,Byte *b) { Byte c = *a; *a = *b, *b = c; }
void SwapInt(int *a,int *b) { int c = *b; *b = *a; *a = c; }

void SwapWord(Word *a,Word *b)
{
 asm {
  PUSH DS;
   LES DI,a;
   LDS SI,b;
   MOV AX,ES:[DI];
   XCHG AX,DS:[SI];
   MOV ES:[DI],AX;
  POP DS;
 }
}

long WhoMax(long a,long b) { return ((a >= b) ? a: b); }
long WhoMin(long a,long b) { return ((a <= b) ? a: b); }

void main(void)
{
 Processor = GetProcessor(), Up32Bits = (Bool)(Processor > _80286);
}